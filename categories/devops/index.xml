<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on WorkSpace</title>
    <link>https://workerwork.github.io/categories/devops/</link>
    <description>Recent content in devops on WorkSpace</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Apr 2020 15:57:51 +0800</lastBuildDate>
    
	<atom:link href="https://workerwork.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build 5GC-C</title>
      <link>https://workerwork.github.io/posts/5gc-c-build/</link>
      <pubDate>Wed, 01 Apr 2020 15:57:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/5gc-c-build/</guid>
      <description>1. 安装打包工具 apt-get install -y build-essential apt-get install -y ruby rubygems ruby-dev #gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/ #gem sources -l gem install fpm  2.</description>
    </item>
    
    <item>
      <title>创建ubuntu docker镜像</title>
      <link>https://workerwork.github.io/posts/ubuntu-docker/</link>
      <pubDate>Tue, 24 Mar 2020 15:48:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/ubuntu-docker/</guid>
      <description>1. 创建Dockerfile [dongfeng@localhost test]$ cat Dockerfile FROM ubuntu:18.04 MAINTAINER The UbuntuOS Project &amp;lt;dongfeng@baicells.com&amp;gt; ENV container docker ENV LC_ALL C ENV DEBIAN_FRONTEND noninteractive RUN sed -i &#39;s/# deb/deb/g&#39; /etc/apt/sources.</description>
    </item>
    
    <item>
      <title>创建ubuntu基础镜像</title>
      <link>https://workerwork.github.io/posts/debootstrap/</link>
      <pubDate>Mon, 23 Mar 2020 22:09:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/debootstrap/</guid>
      <description>1. 安装debootstrap ubuntu操作系统：apt install debootstrap centos操作系统：yum install debootstrap  2. 构建基础Ubuntu的rootfs mkdir /mnt/rootfs debootstrap --verbose --arch=amd64 bionic /mnt/rootfs http://mirrors.aliyun.com/ubuntu 说明：bionic为ubuntu代号，/mnt/rootfs为存放rootfs目录  3.</description>
    </item>
    
    <item>
      <title>ubuntu搭建gitlab服务器</title>
      <link>https://workerwork.github.io/posts/gitlab/</link>
      <pubDate>Sat, 21 Mar 2020 12:27:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/gitlab/</guid>
      <description>1. 安装docker替换国内镜像源 #卸载之前的docker版本 sudo apt-get remove docker docker-engine docker-ce docker.io #apt元数据更新 sudo apt-get update #安装以下包，以使apt可以通过https来使用repository sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common #添加docker官方GPG秘钥并更新元数据 curl -fsSL https://download.</description>
    </item>
    
    <item>
      <title>EPC的CI/CD</title>
      <link>https://workerwork.github.io/posts/epc-cicd/</link>
      <pubDate>Thu, 29 Aug 2019 14:17:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/epc-cicd/</guid>
      <description>1. 流程介绍 开发人员合并代码到gogs，触发钩子，drone根据git仓库中的.drone.yml进行工作，使用fpm进行rpm打包并更新本地yum仓库
2. .drone.yml workspace: base: /root/gogs path: epc-c pipeline: build: image: centos7.5:dev environment: - SSH_ARGS=-p 22 -o StrictHostKeyChecking=no - SCP_ARGS=-P 22 -o StrictHostKeyChecking=no - TEST_SERVER=root@192.</description>
    </item>
    
    <item>
      <title>使用docker-compose搭建drone服务器</title>
      <link>https://workerwork.github.io/posts/drone/</link>
      <pubDate>Thu, 29 Aug 2019 11:22:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/drone/</guid>
      <description>1. docker-compose介绍 docker-compose文档：https://docs.docker.com/compose/
drone文档：https://docs.drone.io/
2. 安装docker-compose yum -y install epel-release yum -y install python-pip pip install --upgrade pip pip install docker-compose #安装补全工具 yum install bash-completion curl -L https://raw.</description>
    </item>
    
    <item>
      <title>搭建jenkins服务器</title>
      <link>https://workerwork.github.io/posts/jenkins/</link>
      <pubDate>Thu, 29 Aug 2019 10:08:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/jenkins/</guid>
      <description> 1. jenkins介绍 jenkins官网：https://jenkins.io/zh/
项目源码：https://github.com/jenkinsci/jenkins
2. docker安装jenkins 1 ）下载jenkins的docker镜像 docker pull jenkins  2 ）创建jenkins存储目录 mkdir /home/var/jenkins  3 ）cd进入/home/var/目录，设置jenkins文件夹的归属用户UID为1000 chown -R 1000:1000 jenkins/  4 ）使用jenkins镜像创建容器 docker run -itd -p 8080:8080 -p 50000:50000 --name jenkins --privileged=true -v /home/var/jenkins:/var/jenkins_home jenkins  5 ）使用 ip:8080执行图像界面安装 </description>
    </item>
    
    <item>
      <title>使用gogs搭建git服务器</title>
      <link>https://workerwork.github.io/posts/gogs/</link>
      <pubDate>Thu, 29 Aug 2019 09:37:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/gogs/</guid>
      <description> 1. gogs介绍 gogs官网：https://gogs.io/ 项目源码：https://github.com/gogs/gogs
2. docker安装gogs 1 ）下载gogs的docker镜像 docker pull gogs/gogs  2 ）创建gogs存储目录 mkdir -p /var/gogs  3 ）使用gogs镜像创建容器 docker run -d --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs  4 ）使用 ip:10080执行图像界面安装 </description>
    </item>
    
    <item>
      <title>AUTO-EPC</title>
      <link>https://workerwork.github.io/posts/auto-epc/</link>
      <pubDate>Wed, 20 Feb 2019 16:46:44 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/auto-epc/</guid>
      <description>AUTO-EPC 使用方法 1 安装本地yum源 在ssh终端任意路径下，使用root用户执行
wget http://192.168.9.105:60080/dongfeng/local-yum/raw/master/install-local-repo.sh | sh  2 软件安装和升级 2.1 一般版本安装和升级 如果是初始安装,执行
yum install [rpm包名]  如果是升级，执行</description>
    </item>
    
  </channel>
</rss>