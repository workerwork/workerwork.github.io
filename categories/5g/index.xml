<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>5G on WorkSpace</title>
    <link>https://workerwork.github.io/categories/5g/</link>
    <description>Recent content in 5G on WorkSpace</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 01 Nov 2019 16:11:51 +0800</lastBuildDate>
    
	<atom:link href="https://workerwork.github.io/categories/5g/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于VPP&#43;DPDK开源框架开发UPF</title>
      <link>https://workerwork.github.io/posts/vpp/</link>
      <pubDate>Fri, 01 Nov 2019 16:11:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/vpp/</guid>
      <description>DPDK DPDK是什么 DPDK全称为Date plane development kit，是一个用来进行包数据处理加速的软件库。
为什么DPDK 传统 Linux 内核网络数据流程：
硬件中断---&amp;gt;取包分发至内核线程---&amp;gt;软件中断---&amp;gt;内核线程在协议栈中处理包---&amp;gt;处理完毕通知用户层 用户层收包--&amp;gt;网络层---&amp;gt;逻辑层---&amp;gt;业务层  基于传统 OS 内核的数据处理的弊端：
 中断处理。当网络中大量数据包到来时，会产生频繁的硬件中断请求，这些硬件中断可以打断之前较低优先级的软中断或者系统调用的执行过程，如果这种打断频繁的话，将会产生较高的性能开销。
 内存拷贝。正常情况下，一个网络数据包从网卡到应用程序需要经过如下的过程：数据从网卡通过 DMA 等方式传到内核开辟的缓冲区，然后从内核空间拷贝到用户态空间，在 Linux 内核协议栈中，这个耗时操作甚至占到了数据包整个处理流程的 57.</description>
    </item>
    
  </channel>
</rss>