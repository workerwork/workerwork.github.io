<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gcc on WorkSpace</title>
    <link>https://workerwork.github.io/tags/gcc/</link>
    <description>Recent content in gcc on WorkSpace</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 25 Dec 2020 14:27:51 +0800</lastBuildDate>
    
	<atom:link href="https://workerwork.github.io/tags/gcc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>linux gcc编译</title>
      <link>https://workerwork.github.io/posts/gcc/</link>
      <pubDate>Fri, 25 Dec 2020 14:27:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/gcc/</guid>
      <description>1. 常用编译命令选项 假设源程序文件名为test.c 1. 无选项编译链接 用法：#gcc test.c 作用：将test.c预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为a.out。 2. 选项 -o 用法：#gcc test.c -o test 作用：将test.c预处理、汇编、编译并链接形成可执行文件test。-o选项用来指定输出文件的文件名。 3. 选项 -E 用法：#gcc -E test.c -o test.i 作用：将test.c预处理输出test.i文件。 4. 选项 -S 用法：#gcc -S test.i 作用：将预处理输出文件test.i汇编成test.s文件。 5. 选项 -c 用法：#gcc -c test.s 作用：将汇编输出文件test.s编译输出test.o文件。 6. 无选项链接 用法：#gcc test.o -o test 作用：将编译输出文件test.o链接成最终可执行文件test。 7. 选项-O 用法：#gcc -O1 test.c -o test 作用：使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长。  2. 多源文件的编译方法 如果有多个源文件，基本上有两种编译方法： [假设有两个源文件为test.c和testfun.c] 1. 多个文件一起编译 用法：#gcc testfun.c test.c -o test 作用：将testfun.c和test.c分别编译后链接成test可执行文件。 2. 分别编译各个源文件，之后对编译后输出的目标文件链接。 用法： #gcc -c testfun.</description>
    </item>
    
  </channel>
</rss>