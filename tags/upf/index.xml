<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>upf on WorkSpace</title>
    <link>https://workerwork.github.io/tags/upf/</link>
    <description>Recent content in upf on WorkSpace</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 15 Jun 2020 09:34:52 +0800</lastBuildDate>
    
	<atom:link href="https://workerwork.github.io/tags/upf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vpp编译分析</title>
      <link>https://workerwork.github.io/posts/vpp-debs/</link>
      <pubDate>Mon, 15 Jun 2020 09:34:52 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/vpp-debs/</guid>
      <description>1. 下载源码 git clone http://192.168.9.105:60080/UPF/upf-vpp.git  2. 编译选项 1.make install-dep #install software dependencies 2.make wipe(wipe-release) #wipe all products 3.make build(build-release) #build binaries 4.make install-ext-deps #install external development dependencies(about dpdk) 5.make pkg-deb #build DEB packages  3. deb包 root@baicells:~/df/upf-vpp/build-root# dpkg -L libvppinfra /. /usr /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/libvppinfra.so.19.08.1 /usr/share /usr/share/doc /usr/share/doc/libvppinfra /usr/share/doc/libvppinfra/changelog.Debian.gz /usr/share/doc/libvppinfra/copyright /usr/lib/x86_64-linux-gnu/libvppinfra.so  root@baicells:~/df/upf-vpp/build-root# dpkg -L libvppinfra-dev /. /usr /usr/include /usr/include/vppinfra /usr/include/vppinfra/atomics.h /usr/include/vppinfra/bihash_16_8.h /usr/include/vppinfra/bihash_24_8.h /usr/include/vppinfra/bihash_40_8.h /usr/include/vppinfra/bihash_48_8.h /usr/include/vppinfra/bihash_8_8.h /usr/include/vppinfra/bihash_template.c /usr/include/vppinfra/bihash_template.h /usr/include/vppinfra/bihash_vec8_8.</description>
    </item>
    
    <item>
      <title>基于VPP&#43;DPDK开源框架开发UPF</title>
      <link>https://workerwork.github.io/posts/vpp/</link>
      <pubDate>Fri, 01 Nov 2019 16:11:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/vpp/</guid>
      <description>DPDK DPDK是什么 DPDK全称为Date plane development kit，是一个用来进行包数据处理加速的软件库。
为什么DPDK 传统 Linux 内核网络数据流程：
硬件中断---&amp;gt;取包分发至内核线程---&amp;gt;软件中断---&amp;gt;内核线程在协议栈中处理包---&amp;gt;处理完毕通知用户层 用户层收包--&amp;gt;网络层---&amp;gt;逻辑层---&amp;gt;业务层  基于传统 OS 内核的数据处理的弊端：
 中断处理。当网络中大量数据包到来时，会产生频繁的硬件中断请求，这些硬件中断可以打断之前较低优先级的软中断或者系统调用的执行过程，如果这种打断频繁的话，将会产生较高的性能开销。
 内存拷贝。正常情况下，一个网络数据包从网卡到应用程序需要经过如下的过程：数据从网卡通过 DMA 等方式传到内核开辟的缓冲区，然后从内核空间拷贝到用户态空间，在 Linux 内核协议栈中，这个耗时操作甚至占到了数据包整个处理流程的 57.1%。
 上下文切换。频繁到达的硬件中断和软中断都可能随时抢占系统调用的运行，这会产生大量的上下文切换开销。另外，在基于多线程的服务器设计框架中，线程间的调度也会产生频繁的上下文切换开销，同样，锁竞争的耗能也是一个非常严重的问题。
 局部性失效。如今主流的处理器都是多个核心的，这意味着一个数据包的处理可能跨多个 CPU 核心，比如一个数据包可能中断在 cpu0，内核态处理在 cpu1，用户态处理在 cpu2，这样跨多个核心，容易造成 CPU 缓存失效，造成局部性失效。如果是 NUMA 架构，更会造成跨 NUMA 访问内存，性能受到很大影响。
 内存管理。传统服务器内存页为 4K，为了提高内存的访问速度，避免 cache miss，可以增加 cache 中映射表的条目，但这又会影响 CPU 的检索效率。
  如何改进：
 控制层和数据层分离。将数据包处理、内存管理、处理器调度等任务转移到用户空间去完成，而内核仅仅负责部分控制指令的处理。这样就不存在上述所说的系统中断、上下文切换、系统调用、系统调度等等问题。
 使用多核编程技术代替多线程技术，并设置 CPU 的亲和性，将线程和 CPU 核进行一比一绑定，减少彼此之间调度切换。
 针对 NUMA 系统，尽量使 CPU 核使用所在 NUMA 节点的内存，避免跨内存访问。
 使用大页内存代替普通的内存，减少 cache-miss。</description>
    </item>
    
  </channel>
</rss>