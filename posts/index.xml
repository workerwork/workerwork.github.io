<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on WorkSpace</title>
    <link>https://workerwork.github.io/posts/</link>
    <description>Recent content in Posts on WorkSpace</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 29 Aug 2019 14:17:51 +0800</lastBuildDate>
    
	<atom:link href="https://workerwork.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EPC的CI/CD</title>
      <link>https://workerwork.github.io/posts/epc-cicd/</link>
      <pubDate>Thu, 29 Aug 2019 14:17:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/epc-cicd/</guid>
      <description>1. 流程介绍 开发人员合并代码到gogs，触发钩子，drone根据git仓库中的.drone.yml进行工作，使用fpm进行rpm打包并更新本地yum仓库
2. .drone.yml workspace: base: /root/gogs path: epc-c pipeline: build: image: centos7.5:dev environment: - SSH_ARGS=-p 22 -o StrictHostKeyChecking=no - SCP_ARGS=-P 22 -o StrictHostKeyChecking=no - TEST_SERVER=root@192.168.9.105 - RUN_PATH=/root/df/caddy/filebrowser/files/EPC-VERSION commands: - git_rev=$(git rev-parse HEAD| cut -c1-10) - git clone http://192.168.9.105:60080/dongfeng/pack-epc-c.git - cd pack-epc-c - ./pack-epc-c.sh - rpm_name=&amp;quot;baicells-epc-c-$(cat VERSION)-$(cat RELEASE).x86_64.rpm&amp;quot; - rpm_rename=$(echo $rpm_name| awk -F .rpm &#39;{print $1}&#39;) - rpm_newname=&amp;quot;$rpm_rename&amp;quot;_&amp;quot;$(date &#39;+%Y%m%d&#39;)&amp;quot;_&amp;quot;$git_rev&amp;quot;.rpm - eval $(ssh-agent -s) - ssh-add /root/.ssh/id_rsa - scp $SCP_ARGS $rpm_name &amp;quot;$TEST_SERVER&amp;quot;:&amp;quot;$RUN_PATH&amp;quot;/&amp;quot;$rpm_newname&amp;quot; - ssh &amp;quot;$TEST_SERVER&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;lt;&amp;lt; eeooff - cd /root/df/caddy/yum.</description>
    </item>
    
    <item>
      <title>使用caddy搭建文件服务器</title>
      <link>https://workerwork.github.io/posts/caddy/</link>
      <pubDate>Thu, 29 Aug 2019 11:56:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/caddy/</guid>
      <description>1. caddy介绍 caddy官网：https://caddyserver.com/ 项目源码：https://github.com/caddyserver/caddy
2. 下载caddy 从官网下载caddy，下载时选择需要的插件
3. 创建工作路径 mkdir caddy-workspace cd caddy-workspace  4. 创建Caddyfile 192.168.9.105:8888 { gzip root filebrowser log access.log errors errors.log filebrowser / filebrowser/files { database /root/df/caddy/filebrowser/filebrowser.db	} } 192.168.9.105:9999 { gzip browse root yum.repo log access.log errors errors.log } 192.168.9.105:7777 { gzip browse root static log access.log errors errors.log } 192.168.9.105:80 { proxy / http://192.168.103.147:80 } 192.168.9.105:5566 { gzip root test }  5. 运行caddy caddy &amp;amp;  6.</description>
    </item>
    
    <item>
      <title>使用docker-compose搭建drone服务器</title>
      <link>https://workerwork.github.io/posts/drone/</link>
      <pubDate>Thu, 29 Aug 2019 11:22:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/drone/</guid>
      <description>1. docker-compose介绍 docker-compose文档：https://docs.docker.com/compose/
drone文档：https://docs.drone.io/
2. 安装docker-compose yum -y install epel-release yum -y install python-pip pip install --upgrade pip pip install docker-compose #安装补全工具 yum install bash-completion curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose version --short)/contrib/completion/bash/docker-compose &amp;gt; /etc/bash_completion.d/docker-compose  3. 建立工作路径 mkdir docker-workspace cd docker-workspace  4. 创建docker-compose.yaml version: &#39;2&#39; services: #gogs: #image: gogs/gogs:latest #ports: # - &amp;quot;10022:22&amp;quot; # - 3000:3000 #volumes: # - /vagrant/gogs-data:/data #restart: always #mysql: #image: mysql:latest #ports: # - 3306:3306 #volumes: # - /vagrant/mysql-data:/var/lib/mysql #restart: always #environment: # - MYSQL_ROOT_PASSWORD=baicells # - MYSQL_DATABASE=gogs drone-server: image: drone/drone:latest ports: - 8000:8000 - 9000:9000 volumes: - /var/lib/drone:/var/lib/drone restart: always environment: # 开启注册，此配置允许任何人自注册和登录系统 - DRONE_OPEN=true #直接配置172.</description>
    </item>
    
    <item>
      <title>搭建jenkins服务器</title>
      <link>https://workerwork.github.io/posts/jenkins/</link>
      <pubDate>Thu, 29 Aug 2019 10:08:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/jenkins/</guid>
      <description> 1. jenkins介绍 jenkins官网：https://jenkins.io/zh/
项目源码：https://github.com/jenkinsci/jenkins
2. docker安装jenkins 1 ）下载jenkins的docker镜像 docker pull jenkins  2 ）创建jenkins存储目录 mkdir /home/var/jenkins  3 ）cd进入/home/var/目录，设置jenkins文件夹的归属用户UID为1000 chown -R 1000:1000 jenkins/  4 ）使用jenkins镜像创建容器 docker run -itd -p 8080:8080 -p 50000:50000 --name jenkins --privileged=true -v /home/var/jenkins:/var/jenkins_home jenkins  5 ）使用 ip:8080执行图像界面安装 </description>
    </item>
    
    <item>
      <title>使用gogs搭建git服务器</title>
      <link>https://workerwork.github.io/posts/gogs/</link>
      <pubDate>Thu, 29 Aug 2019 09:37:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/gogs/</guid>
      <description> 1. gogs介绍 gogs官网：https://gogs.io/ 项目源码：https://github.com/gogs/gogs
2. docker安装gogs 1 ）下载gogs的docker镜像 docker pull gogs/gogs  2 ）创建gogs存储目录 mkdir -p /var/gogs  3 ）使用gogs镜像创建容器 docker run -d --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs  4 ）使用 ip:10080执行图像界面安装 </description>
    </item>
    
    <item>
      <title>制作CentOS ISO</title>
      <link>https://workerwork.github.io/posts/centos-iso/</link>
      <pubDate>Wed, 28 Aug 2019 16:37:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/centos-iso/</guid>
      <description>1. 复制光盘文件 1）挂载iso镜像 #创建目录用于挂载光盘 mkdir /root/centos7 #挂载iso镜像 mount -o loop CentOS-7.0-1406-x86_64-DVD.iso /root/centos7  2）复制光盘文件到编辑目录进行编辑 因为挂载上iso镜像是只读的，如果要编辑，需要将文件复制出来，再编辑。
#首先创建编辑目录： mkdir /root/centos7_iso #复制光盘文件： cp -rf /root/centos7/* /root/centos7_iso/ #diskinfo treeinfo文件需单独拷贝下： cp /root/centos7/.discinfo /root/centos7_iso/ cp /root/centos7/.treeinfo /root/centos7_iso/  2. 编辑ks.cfg文件 系统安装的时候，按照ks.cfg文件的内容进行安装，我们把ks.cfg文件放到isolinux目录下：
cd /root/centos7_iso/isolinux  vim ks-init.cfg #platform=x86, AMD64, or Intel EM64T #version=DEVEL # Install OS instead of upgrade install # Keyboard layouts keyboard &#39;us&#39; # Root password rootpw --iscrypted $1$JtB/A66X$GCT7X3FCJVAPGd3sEY0mx0 # System language lang en_US # System authorization information auth --useshadow --passalgo=sha512 # Use cdrom installation media cdrom # Use text mode install #text graphical # SELinux configuration selinux --disabled # Do not configure the X Window System skipx #firstboot --enable #ignoredisk --only-use=sda # Firewall configuration firewall --disabled # Network information network --bootproto=dhcp --device=eth0 --onboot=no network --hostname=localhost.</description>
    </item>
    
    <item>
      <title>搭建本地yum仓库</title>
      <link>https://workerwork.github.io/posts/local-yum/</link>
      <pubDate>Wed, 28 Aug 2019 15:00:21 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/local-yum/</guid>
      <description>1. 安装工具 yum install -y createrepo  2. 编辑 comps.xml &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE comps PUBLIC &amp;quot;-//CentOS//DTD Comps info//EN&amp;quot; &amp;quot;comps.dtd&amp;quot;&amp;gt; &amp;lt;comps&amp;gt; &amp;lt;group&amp;gt; &amp;lt;id&amp;gt;epc&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;epc&amp;lt;/name&amp;gt; &amp;lt;name xml:lang=&amp;quot;en_GB&amp;quot;&amp;gt;epc&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;epc installation.&amp;lt;/description&amp;gt; &amp;lt;default&amp;gt;false&amp;lt;/default&amp;gt; &amp;lt;uservisible&amp;gt;false&amp;lt;/uservisible&amp;gt; &amp;lt;packagelist&amp;gt; &amp;lt;packagereq type=&amp;quot;mandatory&amp;quot;&amp;gt;baicells-epc-base&amp;lt;/packagereq&amp;gt; &amp;lt;packagereq type=&amp;quot;mandatory&amp;quot;&amp;gt;baicells-epc-ui&amp;lt;/packagereq&amp;gt; &amp;lt;packagereq type=&amp;quot;mandatory&amp;quot;&amp;gt;baicells-epc-ovs-rest&amp;lt;/packagereq&amp;gt; &amp;lt;packagereq type=&amp;quot;mandatory&amp;quot;&amp;gt;baicells-epc-ovsdb-agent&amp;lt;/packagereq&amp;gt; &amp;lt;packagereq type=&amp;quot;mandatory&amp;quot;&amp;gt;baicells-epc-signaltrace&amp;lt;/packagereq&amp;gt; &amp;lt;packagereq type=&amp;quot;mandatory&amp;quot;&amp;gt;baicells-epc-gwsc&amp;lt;/packagereq&amp;gt; &amp;lt;packagereq type=&amp;quot;mandatory&amp;quot;&amp;gt;baicells-epc-openapi&amp;lt;/packagereq&amp;gt; &amp;lt;/packagelist&amp;gt; &amp;lt;/group&amp;gt; &amp;lt;/comps&amp;gt;  3. 创建仓库 createrepo -g comps.xml .  4. 拷贝rpm包到仓库 mkdir rpms cp *.rpm rpms/  5. 在客户端添加本地yum源 cat&amp;gt;&amp;gt;/etc/yum.repo.d/local.repo&amp;lt;&amp;lt;EOF [local] name=local for centos7 baseurl=file://192.</description>
    </item>
    
    <item>
      <title>使用hugo搭建WorkerSpace</title>
      <link>https://workerwork.github.io/posts/workspace/</link>
      <pubDate>Wed, 28 Aug 2019 10:16:21 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/workspace/</guid>
      <description>1. 什么是hugo 引用一下Hugo官网的描述
 The world’s fastest framework for building websites.
 Hugo是一个非常受欢迎的、开源的静态网站生成工具，和Hexo类似。 它速度快，扩展性强.
更多的关于Hugo的介绍，请参考Hugo的官网 https://gohugo.io/ .
2. 安装 hugo 从Github Release页面下载对应的二进制文件,然后把它放在你的PATH目录里即可使用。支持任何平台，根据自己的平台选择相应的二进制包即可。 github链接：https://github.com/gohugoio/hugo
#加入环境变量和执行权限 cp hugo /usr/bin/hugo chmod +x /usr/bin/hugo  3. 使用hugo创建站点 hugo new site workerwork.github.io-site  github链接：https://github.com/workerwork/workerwork.github.io-site
4. 给站点添加主题 cd workerwork.github.io-site git init git submodule add https://github.com/rujews/maupassant-hugo themes/maupassant # Edit your config.toml configuration file # and add the maupassant theme. echo &#39;theme = &amp;quot;maupassant&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  5.</description>
    </item>
    
    <item>
      <title>部署kubernetes</title>
      <link>https://workerwork.github.io/posts/kubernetes-deploy/</link>
      <pubDate>Wed, 28 Aug 2019 10:16:21 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/kubernetes-deploy/</guid>
      <description>kubernetes Kubernetes官方提供三种部署方式： minikube minikube可以实现一种轻量级的Kubernetes集群，通过在本地计算机上创建虚拟机并部署只包含单个节点的简单集群。Minikube适用于Linux，MacOS和Windows系统。Minikube CLI提供集群管理的基本操作，包括 start、stop、status和delete
kubeadm kubeadm是Kubernetes1.6开始官方推出的快速部署Kubernetes集群工具，其思路是将Kubernetes相关服务容器化(Kubernetes静态Pod)以简化部署
custom solutions 最完整的方式，从零开始二进制搭建

部署步骤 准备环境 # 关闭防火墙： # systemctl stop firewalld # systemctl disable firewalld # 关闭selinux： # sed -i &#39;s/enforcing/disabled/&#39; /etc/selinux/config # setenforce 0 # 关闭swap： # swapoff -a # 临时 # vim /etc/fstab # 永久 # vim /etc/sysctl.conf: net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-arptables = 1 # 设置主机名： # hostnamectl set-hostname master # 修改/etc/hosts文件: # cat /etc/hosts 127.</description>
    </item>
    
    <item>
      <title>AUTO-EPC</title>
      <link>https://workerwork.github.io/posts/auto-epc/</link>
      <pubDate>Wed, 20 Feb 2019 16:46:44 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/auto-epc/</guid>
      <description>AUTO-EPC 使用方法 1 安装本地yum源 在ssh终端任意路径下，使用root用户执行
wget http://192.168.9.105:60080/dongfeng/local-yum/raw/master/install-local-repo.sh | sh  2 软件安装和升级 2.1 一般版本安装和升级 如果是初始安装,执行
yum install [rpm包名]  如果是升级，执行
yum update [rpm包名]  2.2 特定版本安装和升级 在本地文件共享服务器http://192.168.9.105:8888/files/EPC-VERSION/ 中存有历史版本文件，取出升级即可
EPC安装包含的RPM包  baicells-epc-ui-3.4.3-1.x86_64_20190220_8799690909.rpm baicells-epc-signaltrace-1.0.0-2.x86_64_20190219_aa985a04ab.rpm baicells-epc-ovsdb-agent-1.0.1-1.x86_64_20190219_e3f0eca7eb.rpm baicells-epc-ovs-rest-1.0.0-2.x86_64_20190219_0c410e6e7d.rpm baicells-epc-openapi-2.0.0-1.x86_64_20190219_52edfb20ba.rpm baicells-epc-gwsc-1.0.0-2.x86_64_20190219_379c4f0e4b.rpm baicells-epc-base-2.0.0-1.x86_64_20190219_d0b3e89484.rpm baicells-epc-c-2.0.0-1.x86_64_20190219_d0b55fsf32.rpm baicells-epc-ovs-1.0.0-1.x86_64_20190219_d1333f1f34.rpm  EPC各组件代码仓库  base库 http://192.168.9.105:60080/dongfeng/epc-base ui库 http://192.168.9.105:60080/dongfeng/epc-ui onos库 http://192.168.9.105:60080/baicells/onos/src/softcn ovs-rest库 http://192.168.9.105:60080/baicells/ovs-rest ovsdb-config-agent库 http://192.168.9.105:60080/baicells/ovsdb-config-agent openapi库 http://192.168.9.105:60080/dongfeng/openapi signaltrace库 http://192.168.9.105:60080/dongfeng/signaltrace epc-c库 http://192.168.9.105:60080/dongfeng/epc-c ovs库 http://192.168.9.105:60080/dongfeng/ovs  RPM包构造方法  开发在git代码托管服务器http://192.168.9.105:60080 上提交更新代码 由web钩子触发后台drone自动使用fpm进行rpm打包 打包好的rpm包自动拷贝到文件共享服务器http://192.168.9.105:8888/files/EPC-VERSION/ 并自动更新本地yum仓库  RPM打包版本 版本说明 以baicells-epc-ui-3.</description>
    </item>
    
    <item>
      <title>Wcg Install</title>
      <link>https://workerwork.github.io/posts/wcg-install/</link>
      <pubDate>Mon, 21 Jan 2019 16:46:44 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/wcg-install/</guid>
      <description>1 前言 1.1 术语    英文缩写 英文全称 中文全称     eGW enterprise gateway 企业网关   OMC operation and maintenance center 操作管理中心    1.2 目的 本文档用来指导安装部署业务网关
2 安装指导 2.1 安装系统 系统版本要求：centos7.2
安装步骤： 1. 在服务器上插入U盘/光盘安装盘 2. 服务器启动进入bios，设置从U盘/光盘启动 3. 服务器进入安装引导界面，选择安装centos7.2 4. 磁盘分区： * boot 2G * swap 16G * 余下空间给&amp;rdquo;/&amp;rdquo; 5. 选择gnome典型安装
2.2 更换内核  进入内核包所在路径 执行yum install kernel-3.10.0-514.el7.centos.x86_64-eGW.rpm替换为eGW专用内核 如果是efi启动执行：grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg 执行reboot重启系统 系统启动成功后，uname -a确认当前系统内核版本是否成功升级到514  2.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://workerwork.github.io/posts/my-first-post/</link>
      <pubDate>Mon, 21 Jan 2019 15:37:51 +0800</pubDate>
      
      <guid>https://workerwork.github.io/posts/my-first-post/</guid>
      <description>haha this is the first test for hugo!</description>
    </item>
    
  </channel>
</rss>